Graphing in Go

Jono MacDougall
Gopher at Ravelin
jono.macdougall@ravelin.com


*

.image logo.png _ 600


* We Detect Fraud

Our platform is a data pipeline to enable *Machine*Learning* and a *Basic*Rules*Engine* to find fraudsters


.image ravelinworks.png _ 500


* Rules are boring and only get you so far

* Machine Learning is interesting and works better


* But it needs data

Machine learning requires relevant and useful data to train and operate on. It is the most imporant and often the most challenging thing to get right in a machine learning system

If your data is bad, irrelevant or sparse then machine learning won't get you anywhere


* We get data by Extracting Features

Clients send us data and we run it through a feature extraction process
This grabs everything we know about the history of the customer and transforms the data in to useful features

.image dataingest.png

* Features

These extracted features are what powers the machine learning models.  This is where domain knowledge is important.


- Velocity (rate of cards added, orders, etc)
- Aggregate (distance from mean order value for a client)
- Exotic things such as distance between characters in a name on a physical keyboard or `aasdfkjsfkasldjfls` detection
- Network Analysis
- Many others



* Speed is Critical

Clients make a call to our API to check if they should allow an order to proceed.

Latency is a big concern. Getting these complex features has to be fast.

* For the most part, this is not too bad

Getting out keyed data is pretty easy these days, even at scale

- Use a Key/Value store (Something like Google BigTable, Cassandra, DynamoDB, etc)
- Caching

* Except for complex features

Some features require more complex queries that are't simply a key/value problem

For example, we build client aggregate statistics from BigQuery and Cache for a time

Network based features are more challenging.

* What Network features do we want?

We connect things like Phone numbers, credit cards, emails, devices and vouchers.

By doing this we can find sets that contain groups of fraudsters that share cards
Individials that recreate accounts on the same device or with the same phone number
We can detect voucher based fraud

We can connect "new" people to existing fraudsters to give a strong signal with very little data

* We studied this offline

.image deathstar5.png

* We need a graph database

*

.image neo4j.png _ 200
.image titan.png _ 200
.image cayley.png _ 200

* Neo4j

Neo4j is proven, popular and mature

It is also expensive and does not have a good scaling story
.image neo4j.png _ 400

* Titan

Titan is less proven, less popular and less mature but it does scale horizontally.

Unfortunately, it is very complicated to run and use.  Further, in tests, it did not provide the speed we wanted.
.image titan.png _ 300

* Cayley

Cayley is like titan but even less mature.

It is inspired by the graph database that powers googles knowledge graph. One day, maybe we can use it but we were worried it wasn't proven
.image cayley.png _ 200

* We were not happy with the options

* So we went back to the drawing board

* What questions do we actual want to ask?

We knew broadly what we wanted to get out of this database but we kept dreaming about question we could ask that we didn't truely have a use case for

*What*we*care*about*is*the*number*of*people*that*are*connected*to*you.*
*And*if*any*of*those*people*are*known*fraudsters.*

(also a few other things but let's keep it simple for now)

* Phil Pearl

Everything that follows is because of Phil Pearl.

I'm talking about it to secretly take credit for the work he did.

Don't tell Phil (he maybe in the audience...)

* Enter Union Find

Union Find is a data structure that allows you to do two basic operations

- You can find things and, imporantly, find what subset they are in
- You can join subsets

We can exploit some features of how this works to provide the querying power that we want

* How does it work?

Live demo follows but in a nutshell

Union find works by creating as flat a tree as we can of connected nodes

It is built such that we need as few 'hops' as possible to get to a parent or representative node

In the parent node, we can store metadata about the set as a whole

In our case, we store information in this node such as:

- Node Counts
- If the set contains a known fraudster
- Somewhat arbitrary tags

It is important to note that this tree loses all the structure of the graph

*

.iframe https://visualgo.net/ufds 600 1000

* So what does this look like in go

Let's go through what this looks like in go in a very simple case


To be clear, this is not a production implementation at all and is certainly not feature complete

* First, some structs

This is what our nodes will look like:
.code code/main.go /type Node struct/,/^}/

And a map to hold the data
.code code/main.go /type UnionFind struct/,/^}/

* Creating a node

We do two thing in the function getParentNodeOrNew depending if the node exists or not.

If it does not exists we simply create it and return

.code code/main.go /func.*getParentNode/,/\/\/\ \.\.\./ HLnew

* Getting the parent and flattening the graph

If it does exist then we try to get the parent and do some graph promotion

.code code/main.go /\/\/\ \.\.\./,/^}/ HLpro

* How to add nodes

.code code/main.go /\/\/ Add/,/^}/

* Storing the data

At this point we update our graph metadata (in this case, count) based on the node we are inserting

.code code/main.go /func.*setParent/,/^}/
.code code/main.go /func.*indexNode/,/^}/

* Putting it all together

.play code/main.go /func.*main/,/^}/

* This is a toy example

What we run in production is far more complex and has been highly optimized for memory and cpu usage

See here for some optimization learnings [[https://hackernoon.com/@philpearl]]

.code code/main.go /\/\/\ ByteSliceToString/,/^}/

* Count timings are very fast

Upper 95th is under 2ms while the average is closer to 1ms

.image counttiming.png _ 1000

* What about scaling and durability

We store everything in memory but persist it to boltDB

We run multiple instances of this service in our infrastructure that get fed off of queues.
If one goes down, the others pick up the slack.

The graph is not the _source_of_truth_ so to speak. We have the ability to rebuild the entire graph from BigQuery in a disaster scenario or if we want to add something to the graph and reindex. We reindex fairly frequently.

To scale, we can shard based on our individial clients.  The graphs themselves have a small memory footprint so this has not been an issue yet

* Does this solve our problem?

For feeding machine learning,

Yes.

Though our data scientists keep wanting to ask it more questions.  We have been able to use the parent node to hold the answers to these questions as they are typically questions that are calculated as metadata over the whole graph.

* But it doesn't solve everything

We also want to display to clients the constructed graphs

But we threw away the structure of the graph

* So we keep an edge store along side our graph

This allows us to reconstruct the graph though it is much slower than just getting the metadata.

It is fast enough to do some offline analysis of our graphs
It is fast enough for display in dashboards

These are not done at high QPS so we can afford them to be less efficient
We just store this in boltDB on disk so it doesn't increase memory pressure

*

.image graph1.png _ 700

* Future

- Currently this lives on one box but we want to find a way to distribute it nicely, locking is an issue
- We are looking to ask more complex questions that involve specific node information beyond aggregate set information. These questions are hard to answer quickly

* We are Hiring

We want Go developers and Javascript developers

Come build cool stuff like Union Find with us!

[[http://www.ravelin.com/jobs]]

* Questions?

I'll ask the first one:

_Is_this_open_source?_

No. It is currently tied closely to our domain and infrastructure. We would have to do some clean up to make it general purpose enough to open source.  One day hopefully we will do this.


Slides are here [[http://talks.godoc.org/github.com/unravelin/talks/unionfind.slide]]
